#!/usr/bin/env python

# :--------------------------------------------------------: #
# :-                                   IMPORTS                                     -: #
# :--------------------------------------------------------: #

try:
    import workerpool, datetime, sys, socket, time
except:
    print 'Could not import.'

# :--------------------------------------------------------: #
# :-                                CONSTANTS                                  -: #
# :--------------------------------------------------------: #

IPS = set()
DEAD = 0
IN_FILE = 2147

# :--------------------------------------------------------: #
# :-                       OTHER                          -: #
# :--------------------------------------------------------: #

print 

FILE_INPUT = raw_input('Enter a file location (Example: list.txt): ') or None;

if FILE_INPUT is None:
    sys.exit('Invalid file')

try:
    with open(FILE_INPUT, 'r') as f:
        pass
except:
    sys.exit('File does not exist.')
    
THREADS = 140  # raw_input("Enter a number of threads to use (Default: 80): ") or 80
TIMEOUT = 2  # raw_input("Enter a number of seconds to timeout (Default: 2): ") or 2

# :--------------------------------------------------------: #

class ChargenScan(workerpool.Job):
    ip = None

    def __init__(self, ip):
            self.ip = str(ip).strip()
            
    def run(self):
            global IPS, TIMEOUT, DEAD
            update()
            start = time.time()
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(int(TIMEOUT))
        
            try:
                sock.connect((self.ip, 19))
                
                get = sock.recv(8193)
                
                if len(get) < 500:  # Useless if it's not amping much
                    DEAD += 1
                    sock.close()
                    return self.ip, False
            except (socket.timeout, socket.error):
                DEAD += 1
                return self.ip, False
                
            IPS.add(self.ip + ' ' + str(len(get)) + ' ' + str(time.time() - start) + "\n")
            sock.close()
            
# :--------------------------------------------------------: #

def update():
    global IPS, IN_FILE, DEAD
    sys.stdout.write("\r - Found: {0} - Dead: {1} - In File: {2} -".format(IPS.__len__(), DEAD, IN_FILE))
    sys.stdout.flush()
    
# :--------------------------------------------------------: #

def save():
        global IPS
        
        update()
        
        if IPS.__len__() == 0:
            print 'None found'
            return
        
        print
        print
        
        fileName = 'CHARGEN-LIST-%s.txt' % datetime.datetime.now().strftime('%Y-%m-%d %H-%M %p')
        
        print 'Saving IPS to:', fileName
        
        print 
        
        with open(fileName, 'w+') as f:
            f.writelines(IPS)
            
# :--------------------------------------------------------: #

print '# :- Cake\'s little chargen checker v0.3 -: #'
print
with open(FILE_INPUT, 'r') as f: 
    lines = f.readlines()
    IN_FILE = len(lines)
    
try:
    pool = workerpool.WorkerPool(size=int(THREADS))
   
    for line in lines:
        pool.put(ChargenScan(line))

finally:
    pool.shutdown()
    pool.wait()
    save()
        
# :--------------------------------------------------------: #
